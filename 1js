 /**
     * This function is used to update the city and state field as per the provided zipcode
     * @param {NONE}
     * @returns {*|NONE}
     **/
    updateCityStateFormFields = () => {
        if (this.props.mapQuestFormType === this.state.formType) {
            const formObject = this.state.formDefinition;
            for (let key in formObject) {
                if ("multiple" === formObject[key].fieldFormat) {
                    //eslint-disable-next-line
                    Object.keys(formObject[key]).forEach(item => {
                        if (_.isObject(formObject[key][item])) {
                            if (formObject[key][item].isCityField) {
                                if (!_.isEmpty(this.props.mapQuestCityName)) {
                                    if (formObject[key][item].value !== this.props.mapQuestCityName) {
                                        this.state.updatedZipCode = this.props.mapQuestCityName;
                                    }
                                    formObject[key][item].value = this.props.mapQuestCityName;
                                    formObject[key][item].isValid = true;
                                    formObject[key][item].touched = true;
                                    formObject[key][item].errorType = null;

                                    if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                        if(this.props.mapQuestCountryName!=="US"){
                                            formObject[key][item].value = "";
                                            formObject[key][item].isValid = false;
                                            formObject[key][item].touched = false;
                                        }
                                    }
                                    
                                } else {
                                    formObject[key][item].value = "";
                                    formObject[key][item].isValid = false;
                                    formObject[key][item].touched = false;
                                }
                            }
                            if (formObject[key][item].isStateField) {
                                if (!_.isEmpty(this.props.mapQuestStateName)) {
                                    const mapQuestStateName = this.props.mapQuestStateName;
                                    if (mapQuestStateName.length > 2 || !_.isArray(formObject[key][item].options)) {
                                        formObject[key][item].value = mapQuestStateName;
                                        formObject[key][item].displayValue = mapQuestStateName;
                                        formObject[key][item].isValid = true;
                                        formObject[key][item].touched = true;
                                        formObject[key][item].errorType = null;
                                        if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                            if(this.props.mapQuestCountryName!=="US"){
                                                formObject[key][item].value = "";
                                                formObject[key][item].displayValue = "";
                                                formObject[key][item].isValid = false;
                                                formObject[key][item].touched = false;
                                            }
                                        }
                                    } else if (_.isArray(formObject[key][item].options)) {
                                        formObject[key][item].value = checkoutDetailDataUtil.getDisplayNameAndValue(mapQuestStateName, formObject[key][item].options, "displayValue", "value");
                                        formObject[key][item].displayValue = checkoutDetailDataUtil.getDisplayNameAndValue(mapQuestStateName, formObject[key][item].options, "value", "displayValue");
                                        formObject[key][item].isValid = true;
                                        formObject[key][item].touched = true;
                                        formObject[key][item].errorType = null;
                                        if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                            if(this.props.mapQuestCountryName!=="US"){
                                                formObject[key][item].value = "";
                                                formObject[key][item].displayValue = "";
                                                formObject[key][item].isValid = false;
                                                formObject[key][item].touched = false;
                                            }
                                        }
                                    }
                                } else {
                                    formObject[key][item].value = "";
                                    formObject[key][item].displayValue = "";
                                    formObject[key][item].isValid = false;
                                    formObject[key][item].touched = false;
                                }
                            }
                            if (formObject[key][item].isZipField) {
                                if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                    if(this.props.mapQuestCountryName!=="US"){
                                        formObject[key][item].value = "";
                                        formObject[key][item].isValid = false;
                                        formObject[key][item].touched = false;
                                    }
                                }
                            }
                        }
                    });
                } else {
                    if (formObject[key].isCityField) {
                        if (!_.isEmpty(this.props.mapQuestCityName)) {
                            formObject[key].value = this.props.mapQuestCityName;
                            formObject[key].isValid = true;
                            formObject[key].touched = true;
                            formObject[key].errorType = null;

                            if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                if(this.props.mapQuestCountryName!=="US"){
                                    formObject[key].value = "";
                            formObject[key].isValid = false;
                            formObject[key].touched = false;
                                }
                            }
                        } else {
                            formObject[key].value = "";
                            formObject[key].isValid = false;
                            formObject[key].touched = false;
                        }
                    }
                    if (formObject[key].isStateField) {
                        if (!_.isEmpty(this.props.mapQuestStateName)) {
                            const mapQuestStateName = this.props.mapQuestStateName;
                            if (mapQuestStateName.length > 2 || !_.isArray(formObject[key].options)) {
                                formObject[key].value = mapQuestStateName;
                                formObject[key].displayValue = mapQuestStateName;
                                formObject[key].isValid = true;
                                formObject[key].touched = true;
                                formObject[key].errorType = null;
                                if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                    if(this.props.mapQuestCountryName!=="US"){
                                        formObject[key].value = "";
                                        formObject[key].displayValue = "";
                                        formObject[key].isValid = false;
                                        formObject[key].touched = false;
                                    }
                                }
                            } else if (_.isArray(formObject[key].options)) {
                                formObject[key].value = checkoutDetailDataUtil.getDisplayNameAndValue(mapQuestStateName, formObject[key].options, "displayValue", "value");
                                formObject[key].displayValue = checkoutDetailDataUtil.getDisplayNameAndValue(mapQuestStateName, formObject[key].options, "value", "displayValue");
                                formObject[key].isValid = true;
                                formObject[key].touched = true;
                                formObject[key].errorType = null;
                                if(this.props.checkCountryUS && this.props.checkCountryUS==="true" && this.props.mapQuestCountryName){
                                    if(this.props.mapQuestCountryName!=="US"){
                                        formObject[key].value = "";
                                        formObject[key].displayValue = "";
                                        formObject[key].isValid = false;
                                        formObject[key].touched = false;
                                    }
                                }
                            }
                        } else {
                            formObject[key].value = "";
                            formObject[key].displayValue = "";
                            formObject[key].isValid = false;
                            formObject[key].touched = false;
                        }
                    }
                }
            }
            /* reset mapQuestData data in store */
            this.props.onInitFormDetailUpdateInStore({
                stateName: null,
                cityName: null,
                countryName:null,
                formType: null,
                mapQuestApiErrorMessage: null
            }, "mapQuestData", false);
            /* updated city and state data in respective form object */
            if (!_.isEmpty(formObject['zip_city']['zipCode']?.value) &&_.isEmpty(formObject['addressLine1']?.value) && formObject['zip_city']['zipCode']?.validation?.isAddressReq) {
                formObject['addressLine1'].isValid = false;
                formObject['addressLine1'].errorType = "isMandatoryError";
            }
            this.props.onInitFormDetailUpdateInStore(this.getUpdatedFormFieldValues(formObject), this.state.formType, false);
        }
    }

    /**
     * This function is used to enable or disable the zipcode length restriction based on selected country
     * @param {BOOLEAN|OBJECT} {
     *      @isZipRestrictionRequired contains the boolean value to indicate whether zip length restriction is required.
     *      @formObject contains the latest form definition object
     * }
     * @returns {*|NONE}
     **/
    updateZipCodeLengthRestriction = (isZipRestrictionRequired, formObject) => {
        for (let key in formObject) {
            if ("multiple" === formObject[key].fieldFormat) {
                //eslint-disable-next-line
                Object.keys(formObject[key]).forEach(item => {
                    if (_.isObject(formObject[key][item]) && formObject[key][item].isZipField) {
                        /* reset the zip field value, remove success icon and error note when the country is changed */
                        formObject[key][item].value = "";
                        formObject[key][item].isValid = false;
                        formObject[key][item].touched = false;
                        formObject[key][item].errorType = null;
                        if (isZipRestrictionRequired) {
                            formObject[key][item].validation.maxLength = 5;
                            formObject[key][item].validation.minLength = 5;
                            formObject[key][item].elementConfig.onKeyPress = (event) => { return (event.charCode > 47 && event.charCode < 58) ? true : event.preventDefault() }
                        } else {
                            formObject[key][item].validation.maxLength = null;
                            formObject[key][item].validation.minLength = null;
                            formObject[key][item].elementConfig.onKeyPress = null;
                        }
                    }
                });
            } else {
                if (formObject[key].isZipField) {
                    /* reset the zip field value, remove success icon and error note when the country is changed */
                    formObject[key].value = "";
                    formObject[key].isValid = false;
                    formObject[key].touched = false;
                    formObject[key].errorType = null;
                    if (isZipRestrictionRequired) {
                        formObject[key].validation.maxLength = 5;
                        formObject[key].validation.minLength = 5;
                    } else {
                        formObject[key].validation.maxLength = null;
                        formObject[key].validation.minLength = null;
                        formObject[key].elementConfig.onKeyPress = null;
                    }
                }
            }
        }
    }

    /**
     * This function is used to update the credit card CVV limit
     * @param {STRING|OBJECT} {
     *      @creditCardBrand contains the name of the credit card vendor
     *      @formObject contains the latest form definition object
     * }
     * @returns {*|NONE}
     **/
    updateCreditCardCVVLimit = (creditCardBrand, formObject, isReset) => {
        const creditCardCVVLimit = checkoutDetailDataUtil.getCreditCardCVVLimit(creditCardBrand);
        for (let key in formObject) {
            if ("multiple" === formObject[key].fieldFormat) {
                //eslint-disable-next-line
                Object.keys(formObject[key]).forEach(item => {
                    if (_.isObject(formObject[key][item]) && formObject[key][item].isNewCardCVV) {
                        if (isReset) {
                            formObject[key][item].validation.maxLength = creditCardCVVLimit;
                            formObject[key][item].validation.minLength = creditCardCVVLimit;
                        } else {
                            formObject[key][item].value = "";
                            formObject[key][item].isValid = false;
                            formObject[key][item].validation.maxLength = creditCardCVVLimit;
                            formObject[key][item].validation.minLength = creditCardCVVLimit;
                        }
                    }
                });
            } else {
                if (formObject[key].isNewCardCVV) {
                    if (isReset) {
                        formObject[key].validation.maxLength = creditCardCVVLimit;
                        formObject[key].validation.minLength = creditCardCVVLimit;
                    }
                    else {
                        formObject[key].value = "";
                        formObject[key].isValid = false;
                        formObject[key].validation.maxLength = creditCardCVVLimit;
                        formObject[key].validation.minLength = creditCardCVVLimit;
                    }
                }
            }
        }
    }

    /**
     * This function is used to validate the entire form HTML fields
     * @param {STRING|JSON} {
     *      @formObject contains the updated form definition object
     * }
     * @returns {*|BOOLEAN}
     **/
    getUpdatedFormFieldValues = (formObject) => {
        let formFieldJson = {};
        for (let key in formObject) {
            if ("multiple" === formObject[key].fieldFormat) {
                //eslint-disable-next-line
                Object.keys(formObject[key]).forEach(item => {
                    if (_.isObject(formObject[key][item])) {
                        formFieldJson[item] = {};
                        formFieldJson[item]["value"] = formObject[key][item].value;
                        formFieldJson[item]["isValid"] = formObject[key][item].isValid;
                    }
                });
            } else {
                formFieldJson[key] = {};
                formFieldJson[key]["value"] = formObject[key].value;
                formFieldJson[key]["isValid"] = formObject[key].isValid;
                if(formObject[key]?.elementConfig?.id==="createAccountEmail" && this.state.formType === constantValues.FORM_TYPE_CREATE_ACCOUNT){
                    formFieldJson[key]["isValidRealEmail"] = formObject[key]?.validation?.isValidRealEmail;
                    formFieldJson[key]["validRealEmailError"] = formObject[key]?.errorDescriptions?.validRealEmailError;
                    if(!formObject[key]?.validation?.isValidRealEmail){
                        formFieldJson[key]["isValid"] = false;
                    }
                    if(formObject[key]?.validation?.isMasked){
                        formFieldJson[key]["isValid"] = true;
                    }
                }
            }
        }
        return formFieldJson;
    }

    /**
     * This function is used to validate the entire form HTML fields
     * @param {STRING|JSON} {
     *      @formObject contains the updated form definition object
     * }
     * @returns {*|BOOLEAN}
     **/
    getCountryIdentifier = (formObject) => {
        let countryIdentifier = "";
        for (let key in formObject) {
            if ("multiple" === formObject[key].fieldFormat) {
                //eslint-disable-next-line
                Object.keys(formObject[key]).forEach(item => {
                    if (_.isObject(formObject[key][item]) && formObject[key][item].isCountryField) {
                        countryIdentifier = !_.isEmpty(formObject[key][item].value) ? formObject[key][item].value : "";
                    }
                });
            } else {
                if (formObject[key].isCountryField) {
                    countryIdentifier = !_.isEmpty(formObject[key].value) ? formObject[key].value : "";
                }
            }
        }
        return countryIdentifier;
    }

    /**
     * This function is used to display the entered password/masked field
     * @param {STRING} {
     *      @identifier contains the identifier of the input field for which password is to be displayed
     * }
     * @returns {*|NONE}
     **/
    passwordFieldDisplayHandler = (identifier) => {
        if (document.getElementById(identifier).type === "password") {
            document.getElementById(identifier).type = "text";
            if (identifier === 'leaseSSN4') {
                document.getElementById(identifier).type = "number";
            }
            if (!_.isEmpty(document.getElementsByName(`${identifier}Anchor`))) {
                document.getElementsByName(`${identifier}Anchor`)[0].setAttribute("aria-label", `${this.props.scriptingJson[constantValues._LBL_FORM_PASSWORD_WITHOUT_ASTRIK]} shown ${this.props.scriptingJson[constantValues._LNK_HIDE]} ${this.props.scriptingJson[constantValues._LBL_FORM_PASSWORD_WITHOUT_ASTRIK]}`)
                document.getElementsByName(`${identifier}Anchor`)[0].innerText = this.props.scriptingJson[constantValues._LNK_HIDE];
            }
        } else {
            document.getElementById(identifier).type = "password";
            if (!_.isEmpty(document.getElementsByName(`${identifier}Anchor`))) {
                document.getElementsByName(`${identifier}Anchor`)[0].setAttribute("aria-label", `${this.props.scriptingJson[constantValues._LBL_FORM_PASSWORD_WITHOUT_ASTRIK]} hidden ${this.props.scriptingJson[constantValues._LNK_VIEW]} ${this.props.scriptingJson[constantValues._LBL_FORM_PASSWORD_WITHOUT_ASTRIK]}`)
                document.getElementsByName(`${identifier}Anchor`)[0].innerText = this.props.scriptingJson[constantValues._LNK_VIEW];
            }
        }
    }

    /**
     * This function is executed when an input is provided to the HTML form field
     * @param {STRING|JSON} {
     *      @event contains either the HTML form field target or the entered value
     *      @elementFieldFormat indicates the type of form field i.e., `single` or `multiple`
     *      @elementIdentifier indicates the name of the field with which user interacted
     *      @subElementIdentifier indicates the name of the field with which user interacted in case the field of multiple format
     * }
     * @returns {*|NONE} updates the class state formDefinition object
     **/
    inputChangedHandler = (event, elementFieldFormat, elementIdentifier, subElementIdentifier, elementOptions, skipOnChangeValidation,isCheckoutShippingZip) => {
        let enteredValue = _.isString(event) ? event : event.target.value;
        let updatedFormDefinition = {
            ...this.state.formDefinition
        }

        if(elementIdentifier === 'emailAddress') {
            this.state.emailAlreadyExist = false;
        }
        if(elementIdentifier === 'zip_city') {
            this.props.resetMarketSegmentError()
            this.props.editShippingMarketSegmentErrorHandler("")
        }
        if ((["cardNumber", "cardExpiry", "cardCVV"].includes(elementIdentifier) || (elementFieldFormat === 'single' && elementIdentifier==='creditCard')) && this.props.updateCreditCardDataNotifier) {
            this.props.updateCreditCardDataNotifier(elementIdentifier);
        }

        

        const dropDownLabelSpanElem = document.getElementById(elementIdentifier + this.state.formType + "LabelSpan");
        const dropDownSelectedSpanElem = document.getElementById(elementIdentifier + this.state.formType + "SelectedSpan");
        if (!_.isNull(dropDownSelectedSpanElem) && !_.isEmpty(event) && _.isString(event)) {
            if (!_.isNull(dropDownLabelSpanElem)) {
                dropDownLabelSpanElem.className = "place-holder-selected";
            }
            dropDownSelectedSpanElem.innerText = checkoutDetailDataUtil.getDisplayNameAndValue(event, elementOptions, "value", "displayValue");
        }

        if (updatedFormDefinition[elementIdentifier]?.isStateFieldToggleRequired) {
            const stateFieldKey = _.findKey(updatedFormDefinition, function (formDefinitionJson) { return formDefinitionJson.isStateField; });
            const countryDisplayValue = checkoutDetailDataUtil.getDisplayNameAndValue(event, elementOptions, "value", "displayValue");
            /* toggle the state field between dropdown format and textbox format */
            if (countryDisplayValue.search(new RegExp(this.props.scriptingJson[constantValues.STATE_TOGGLE_COUNTRIES_REGEX], "i")) >= 0) {
                const stateSelectedSpanElem = document.getElementById("state" + this.state.formType + "SelectedSpan");
                const countryCode = (findRequestedObject(constantValues.COUNTRY_LIST, countryDisplayValue, "displayValue") || {}).value;
                /* refresh the state label span */
                if (!_.isNull(stateSelectedSpanElem)) {
                    stateSelectedSpanElem.innerText = "";
                }
                updatedFormDefinition[stateFieldKey] = this.getNewStateFieldDefinition("dropdown", countryCode);
            } else {
                updatedFormDefinition[stateFieldKey] = this.getNewStateFieldDefinition("textbox");
            }
            /* enable or disable the zipcode restriction based on selected country */
            if (countryDisplayValue.search(new RegExp(this.props.scriptingJson[constantValues.ZIP_RESTRICTED_COUNTRIES_REGEX], "i")) >= 0) {
                this.updateZipCodeLengthRestriction(true, updatedFormDefinition);
            } else {
                this.updateZipCodeLengthRestriction(false, updatedFormDefinition);
            }
        }

        let updatedFormElement = null;
        if ("multiple" === elementFieldFormat) {
            const updatedFormObjectJson = {
                ...updatedFormDefinition[elementIdentifier]
            }
            updatedFormElement = {
                ...updatedFormObjectJson[subElementIdentifier]
            }
            /* fetching and providing the credit card type */
            if (updatedFormElement.validation.isCreditCard || updatedFormElement.validation.isAcquisitionCreditCard) {
                const creditCardBrandName = checkoutDetailDataUtil.getCreditCardBrandName(enteredValue);
                if (!_.isEmpty(creditCardBrandName)) {
                    this.props.updateCreditCardVendorIconHandler(creditCardBrandName);
                } else {
                    this.props.updateCreditCardVendorIconHandler(null);
                }
            }

            /*updating the corresponding formElement JSON immutably */
            if (updatedFormElement.validation) {
                const validationStatusObj = this.checkFormInputs(enteredValue, updatedFormElement.validation, undefined, updatedFormElement?.elementConfig?.id);
                updatedFormElement.isValid = validationStatusObj.validity;
                //updatedFormElement.errorType = validationStatusObj.errorType;
            }

            /*updating the corresponding formElement JSON immutably */
            
            updatedFormElement.value = enteredValue;
            updatedFormElement.touched = true;

            /* Format the phone number in USA format */
            if (updatedFormElement.isPhoneField) {
                let phoneNumber = updatedFormElement.value;
                const input = phoneNumber.replace(/\D/g, '').substring(0, 10); // First ten digits of input only
                const zip = input.substring(0, 3), middle = input.substring(3, 6), last = input.substring(6, 10);

                if (input.length > 6) { phoneNumber = `(${zip}) ${middle} ${last}`; }
                else if (input.length > 3) { phoneNumber = `(${zip}) ${middle}`; }
                else if (input.length > 0) { phoneNumber = `(${zip}`; }
                updatedFormElement.value = phoneNumber;
            }
            /* Format the Zip Code if pasted */
            if (updatedFormElement.isCheckoutShippingZip) {
                let zipentered = updatedFormElement.value;
                var input = zipentered
                if(input === ""){
                    const secondFormElement = {
                        ...updatedFormObjectJson["city"]
                    }
                    const validationStatusObj = this.checkFormInputs("", secondFormElement.validation, undefined, secondFormElement?.elementConfig?.id);
                    secondFormElement.isValid = validationStatusObj.validity;

                    secondFormElement.value = "";
                    // secondFormElement.touched = true;
                    updatedFormObjectJson["city"] = secondFormElement;
                }
                if(zipentered.length >5){
                input = zipentered.replace(/\D/g, '').substring(0, 5); 
                }
                updatedFormElement.value = input;
            }
            /* Format the card expiry in MM/YY format */
            if (updatedFormElement.isCardExpiryField) {
                let cardExpiry = updatedFormElement.value;
                const input = cardExpiry.replace(/\D/g, '').substring(0, 4); // First 4 digits of input only
                const month = input.substring(0, 2), year = input.substring(2, 4)
                if (input.length > 2) { cardExpiry = `${month}/${year}` }
                updatedFormElement.value = cardExpiry;
            }
            if (updatedFormElement.isCityField) {
                this.state.updatedZipCode = false;
            }

            updatedFormObjectJson[subElementIdentifier] = updatedFormElement;
            updatedFormDefinition[elementIdentifier] = updatedFormObjectJson;
        } else {
            updatedFormElement = {
                ...updatedFormDefinition[elementIdentifier]
            }
            /* fetching and providing the credit card type */
            if (updatedFormElement.validation.isCreditCard || updatedFormElement.validation.isAcquisitionCreditCard) {
                const creditCardBrandName = checkoutDetailDataUtil.getCreditCardBrandName(enteredValue);
                if (!_.isEmpty(creditCardBrandName)) {
                    this.props.updateCreditCardVendorIconHandler(creditCardBrandName);
                } else {
                    this.props.updateCreditCardVendorIconHandler(null);
                }
                /* Update the credit card CVV limit */
                this.updateCreditCardCVVLimit(creditCardBrandName, updatedFormDefinition);
            }

            /* Updating the corresponding formElement JSON immutably */
            updatedFormElement.value = enteredValue;
            /* switching touched parameter for checkbox/toggle field type */
            if ("checkbox" === updatedFormElement.fieldType || "toggle" === updatedFormElement.fieldType) {
                if (updatedFormElement.touched) {
                    updatedFormElement.touched = false;
                    updatedFormElement.value = "";
                } else {
                    updatedFormElement.touched = true;
                    updatedFormElement.value = "checked";
                }
            } else {
                updatedFormElement.touched = true;
            }

            /*updating the corresponding formElement JSON immutably */
            if (updatedFormElement.validation) {
                const validationStatusObj = this.checkFormInputs(updatedFormElement.value, updatedFormElement.validation, undefined, updatedFormElement?.elementConfig?.id);
                updatedFormElement.isValid = validationStatusObj.validity;
                //updatedFormElement.errorType = validationStatusObj.errorType;
            }

            /* check for valid raf code alphanumeric-alphanumeric*/
            if (updatedFormElement.validation.isRafCode) {
                let rafCode = updatedFormElement.value;
                updatedFormElement.isValid = /^[a-z0-9A-Z]{4}-{1}[a-z0-9A-Z]{4}$/.test(rafCode);
            }

            /* since state is a dropdown field, hence update the validity status when onChange event occur */
            if ("dropdown" === updatedFormElement.fieldType) {
                if (!_.isEmpty(enteredValue)) {
                    updatedFormElement.value = enteredValue;
                    updatedFormElement.displayValue = checkoutDetailDataUtil.getDisplayNameAndValue(enteredValue, updatedFormElement.options, "value", "displayValue");
                    updatedFormElement.isValid = true;
                    updatedFormElement.errorType = null;
                    if(document.getElementById(`${elementIdentifier}${this.state.formType}Label`)){
                        document.getElementById(`${elementIdentifier}${this.state.formType}Label`).focus();
                    }
                    if(elementIdentifier === 'nickName') {
                        this.props.resetMarketSegmentError();
                    }
                } else {
                    updatedFormElement.isValid = false;
                    updatedFormElement.errorType = "isMandatoryError";
                }
            }
            /* Format the phone number in USA format */
            if (updatedFormElement.isPhoneField) {
                let phoneNumber = updatedFormElement.value;
                const input = phoneNumber.replace(/\D/g, '').substring(0, 10); // First ten digits of input only
                const zip = input.substring(0, 3), middle = input.substring(3, 6), last = input.substring(6, 10);

                if (input.length > 6) { phoneNumber = `(${zip}) ${middle} ${last}`; }
                else if (input.length > 3) { phoneNumber = `(${zip}) ${middle}`; }
                else if (input.length > 0) { phoneNumber = `(${zip}`; }
                updatedFormElement.value = phoneNumber;
            }

            /* Format the card number */
            if (updatedFormElement.isCardNumberField) {
                let cardNumber = updatedFormElement.value;
                const input = cardNumber.replace(/\D/g,'');
                const first = input.substring(0,4), second = input.substring(4,8), third = input.substring(8,12), fourth = input.substring(12,16), fifth = input.substring(16,19);

                if(input.length > 16){cardNumber = `${first} ${second} ${third} ${fourth} ${fifth}`;}
                else if(input.length > 12){cardNumber = `${first} ${second} ${third} ${fourth}`;}
                else if(input.length > 8){cardNumber = `${first} ${second} ${third}`;}
                else if(input.length > 4){cardNumber = `${first} ${second}`;}
                else if(input.length > 0){cardNumber = `${first}`;}
                updatedFormElement.value = cardNumber;
            }
            if (updatedFormElement.elementConfig.type === "tel") {
                updatedFormElement.isValid = updatedFormElement.value.length === 14 ? true : false
            }
            if (updatedFormElement.elementConfig.type === "email") {
                updatedFormElement.isValid = updatedFormElement.value.match(constantValues.IS_EMAIL_REGEX) ? true : false
            }
            updatedFormDefinition[elementIdentifier] = updatedFormElement;

            /* store the state field detail in redux store */
            if (updatedFormElement.isStateField || "checkbox" === updatedFormElement.fieldType || "toggle" === updatedFormElement.fieldType || "gifttextarea" === updatedFormElement.fieldType) {
                this.props.onInitFormDetailUpdateInStore(this.getUpdatedFormFieldValues(updatedFormDefinition), this.state.formType, false);
            }
            if ("dropdown" === updatedFormElement.fieldType) {
                this.props.onInitFormDetailUpdateInStore({ "searchUserInput": null, "elementIdentifier": null, "elementName": null }, "dropDownFormFieldAccess", false);
            }
        }

        /*check the form validity */
        let formIsValid = this.checkFormValidity(updatedFormDefinition);
        if (formIsValid || skipOnChangeValidation) {
            this.props.onInitFormDetailUpdateInStore(this.getUpdatedFormFieldValues(updatedFormDefinition), this.state.formType, false);
        }

        /* set the state with updated shipping form details and form validity status */
        this.setState({
            formDefinition: updatedFormDefinition,
            formIsValid: formIsValid
        });

        const e = {};
        Object.assign(e,event);
        setTimeout(()=>{
            if(isCheckoutShippingZip){
                enteredValue = enteredValue.length >5 ? enteredValue.substring(0,5) : enteredValue;
                this.focusOutValidationHandler(e, elementFieldFormat, elementIdentifier, subElementIdentifier)
            }
        },1000)
    }
