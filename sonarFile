sonar.exclusions=**/store/**, store/**, **/*.spec.*, **/*.layout.*, **/mock-server/**, **/setup/**, **/*config*, **/DeviceProtectionSelector/protectionPage.module.css, Dockerfile, scripts/**, public/nsa/ui/newrelic/**, **/styledComponents.*, templates/**, **/common/components/**, **/middleware.ts, app/common/fonts/**, app/componentManager/**, app/**/layout.tsx
sonar.coverage.exclusions=jest.setup.js, **/store/**, store/**, **/*.spec.*, **/*.layout.* , **/*config*, services/**, lighthouse/**, scripts/**, Dockerfile, public/nsa/ui/newrelic/**, **/styledComponents.*, templates/**, **/common/components/**, jest.config.js, **/tests/**, newrelic.cjs, **/middleware.ts, app/common/fonts/**, app/componentManager/**, app/**/layout.tsx
sonar.cpd.exclusions=



C:\Users\vinoma1\simpleMobile\onevz-value-digital-mfe-account\components\Footer\styles

componentDidUpdate(prevProps, prevState) {
        if (prevProps.validRealEmailCheck != this.props.validRealEmailCheck && this.props.validRealEmailCheck) {
            if (this.state.emailValidationData) {
                this.registerAccountHandler(this.state.emailValidationData);
            } else {
                this.registerAccountHandler();
            }
        }
        const { firstName: { isValid: fnameIsValid } = { isValid: false }, lastName: { isValid: lnameIsValid } = { isValid: false } } = this.props?.shippingInfo || {}
        const { zipCode: { isValid: zipValid } = { isValid: false } } =this.props?.shippingAddressInfo || {}
        const phoneNumber = this.props?.shippingInfo?.phoneNumber?.value;

        let checkButtonEnable = false;
        if (fnameIsValid && lnameIsValid && zipValid) {
            this.setState({ ctnBtnDisable: false });
            checkButtonEnable = true;
        } else {
            // setCtnBtnDisable(true);
            this.setState({ ctnBtnDisable: true });
            checkButtonEnable = false;
        }
        if (checkButtonEnable === true) {
            if (phoneNumber && phoneNumber.length !== 14 || this.state.birthDateValid === true) {
                // setCtnBtnDisable(true);
                this.setState({ ctnBtnDisable: true });
            } else {
                // setCtnBtnDisable(false);
                this.setState({ ctnBtnDisable: false });
            }
        }
    }
Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.
